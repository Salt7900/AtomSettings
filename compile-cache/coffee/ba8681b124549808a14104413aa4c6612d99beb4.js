(function() {
  var CompositeDisposable, PowerMode, PowerModeView, _;

  PowerModeView = require('./power-mode-view');

  CompositeDisposable = require('atom').CompositeDisposable;

  _ = require('underscore-plus');

  module.exports = PowerMode = {
    powerModeView: null,
    MAX_PARTICLES: 500,
    PARTICLE_NUM_RANGE: [5, 6, 7, 8, 9, 10, 11, 12],
    PARTICLE_GRAVITY: 0.075,
    PARTICLE_ALPHA_FADEOUT: 0.96,
    PARTICLE_VELOCITY_RANGE: {
      x: [-1, 1],
      y: [-3.5, -1.5]
    },
    OFFSET: 40,
    particles: [],
    particlePointer: 0,
    lastDraw: 0,
    subscriptions: null,
    editor: null,
    canvas: null,
    canvasContext: null,
    throttledShake: null,
    throttledSpawnParticles: null,
    activate: function(state) {
      this.powerModeView = new PowerModeView(state.powerModeViewState);
      this.editor = document.getElementsByTagName("atom-workspace")[0];
      this.canvas = this.powerModeView.getElement();
      this.canvasContext = this.canvas.getContext("2d");
      this.throttledShake = _.throttle(this.shake, 100, {
        trailing: false
      });
      this.throttledSpawnParticles = _.throttle(this.spawnParticles, 25, {
        trailing: false
      });
      window.requestAnimationFrame(this.onFrame.bind(this));
      this.subscriptions = new CompositeDisposable;
      return this.subscriptions.add(atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          return _this.subscriptions.add(editor.onDidChangeCursorPosition(function(event) {
            return _this.onCursorChange(event);
          }));
        };
      })(this)));
    },
    deactivate: function() {
      this.subscriptions.dispose();
      return this.powerModeView.destroy();
    },
    serialize: function() {
      return {
        powerModeViewState: this.powerModeView.serialize()
      };
    },
    onFrame: function() {
      var particle, _i, _len, _ref;
      this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
      _ref = this.particles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        if (particle.alpha <= 0.1) {
          continue;
        }
        particle.velocity.y += this.PARTICLE_GRAVITY;
        particle.x += particle.velocity.x;
        particle.y += particle.velocity.y;
        particle.alpha *= this.PARTICLE_ALPHA_FADEOUT;
        this.canvasContext.fillStyle = "rgba(" + (particle.color.join(", ")) + ", " + particle.alpha + ")";
        this.canvasContext.fillRect(Math.round(particle.x - 1), Math.round(particle.y - 1), 3, 3);
      }
      return window.requestAnimationFrame(this.onFrame.bind(this));
    },
    getCursorPosition: function() {
      return {
        x: Math.random() * this.canvas.width + this.OFFSET,
        y: Math.random() * this.canvas.height + this.OFFSET
      };
    },
    spawnParticles: function() {
      var color, numParticles, x, y, _ref;
      _ref = this.getCursorPosition(), x = _ref.x, y = _ref.y;
      numParticles = _.sample(this.PARTICLE_NUM_RANGE);
      color = [255, 255, 255];
      return _.times(numParticles, (function(_this) {
        return function() {
          _this.particles[_this.particlePointer] = _this.createParticle(x, y, color);
          return _this.particlePointer = (_this.particlePointer + 1) % _this.MAX_PARTICLES;
        };
      })(this));
    },
    createParticle: function(x, y, color) {
      return {
        x: x,
        y: y + 10,
        alpha: 1,
        color: color,
        velocity: {
          x: this.PARTICLE_VELOCITY_RANGE.x[0] + Math.random() * (this.PARTICLE_VELOCITY_RANGE.x[1] - this.PARTICLE_VELOCITY_RANGE.x[0]),
          y: this.PARTICLE_VELOCITY_RANGE.y[0] + Math.random() * (this.PARTICLE_VELOCITY_RANGE.y[1] - this.PARTICLE_VELOCITY_RANGE.y[0])
        }
      };
    },
    drawParticles: function() {
      var particle, _i, _len, _ref, _results;
      this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        if (particle.alpha <= 0.1) {
          continue;
        }
        particle.velocity.y += this.PARTICLE_GRAVITY;
        particle.x += particle.velocity.x;
        particle.y += particle.velocity.y;
        particle.alpha *= this.PARTICLE_ALPHA_FADEOUT;
        this.canvasContext.fillStyle = "rgba(" + (particle.color.join(", ")) + ", " + particle.alpha + ")";
        _results.push(this.canvasContext.fillRect(Math.round(particle.x - 1), Math.round(particle.y - 1), 3, 3));
      }
      return _results;
    },
    shake: function() {
      var intensity, x, y;
      intensity = 1 + 2 * Math.random();
      x = intensity * (Math.random() > 0.5 ? -1 : 1);
      y = intensity * (Math.random() > 0.5 ? -1 : 1);
      this.editor.style.transform = "translate3d(" + x + "px, " + y + "px, 0)";
      return setTimeout((function(_this) {
        return function() {
          return _this.editor.style.transform = "";
        };
      })(this), 75);
    },
    onCursorChange: function() {
      this.throttledShake();
      return _.defer((function(_this) {
        return function() {
          return _this.throttledSpawnParticles();
        };
      })(this));
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/benfallon/.atom/packages/power-mode/lib/power-mode.coffee
