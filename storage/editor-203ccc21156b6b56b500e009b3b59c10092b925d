{"version":1,"windowDimensions":{"x":4,"y":23,"width":1276,"height":777,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/benfallon/exercism/javascript/bob"],"buffers":[{"id":"e6b6161ea4a20e0f25007d3f7dbc378c","text":"//\n// This is only a SKELETON file for the \"Bob\" exercise. It's been provided as a\n// convenience to get you started writing code faster.\n//\n\nvar Bob = function() {};\n\nBob.prototype.hey = function(input) {\n\tvar questionMark = input[input.length - 1] === '?';\n\tvar stringEmpty = input == false;\n\tvar includesLetters = /[A-Z]/.test(input.toUpperCase());\n\n\tif (input === input.toUpperCase() && !stringEmpty && includesLetters) {\n\t\treturn 'Whoa, chill out!';\n\t} else if (stringEmpty) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (questionMark) {\n\t\treturn 'Sure.';\n\t} else {\n\t\treturn 'Whatever.';\n\t};\n};\n\n\nfunction isUpperCase(str) {\n    return str === str.toUpperCase();\n}\n\nmodule.exports = Bob;\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":22,"column":0},"end":{"row":22,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":4,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[7,0],[17,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[7,0],[17,2]],"newRange":[[7,0],[22,0]],"oldText":"Bob.prototype.hey = function(input) {\n  if(input.slice(-1) === \"?\"){\n    return \"Sure.\"\n  } else if (input.trim().length === 0){\n    return \"Fine. Be that way!\"\n  } else if (isUpperCase(input)){\n    return \"Whoa, chill out!\"\n  } else {\n    return \"Whatever.\"\n  }\n};","newText":"Bob.prototype.hey = function(input) {\n\tvar questionMark = input[input.length - 1] === '?';\n\tvar stringEmpty = input == false;\n\tvar includesLetters = /[A-Z]/.test(input.toUpperCase());\n\n\tif (input === input.toUpperCase() && !stringEmpty && includesLetters) {\n\t\treturn 'Whoa, chill out!';\n\t} else if (stringEmpty) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (questionMark) {\n\t\treturn 'Sure.';\n\t} else {\n\t\treturn 'Whatever.';\n\t};\n};\n"}},{"type":"change","content":{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[7,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[22,0],[22,0]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/exercism/javascript/bob/bob.js","digestWhenLastPersisted":"e47f8e8e7f4288717b716d45c8d2578e2c35f6fe","preferredLineEnding":null,"nextMarkerId":4,"deserializer":"TextBuffer","version":5},{"id":"0f5effca5403810e7927338467dd655c","text":"# Bob\n\nBob is a lackadaisical teenager. In conversation, his responses are very limited.\n\nBob answers 'Sure.' if you ask him a question.\n\nHe answers 'Whoa, chill out!' if you yell at him.\n\nHe says 'Fine. Be that way!' if you address him without actually saying\nanything.\n\nHe answers 'Whatever.' to anything else.\n\n## Instructions\n\nRun the test file, and fix each of the errors in turn. When you get the\nfirst test to pass, go to the first pending or skipped test, and make\nthat pass as well. When all of the tests are passing, feel free to\nsubmit.\n\nRemember that passing code is just the first step. The goal is to work\ntowards a solution that is as readable and expressive as you can make\nit.\n\nPlease make your solution as general as possible. Good code doesn't just\npass the test suite, it works with any input that fits the\nspecification.\n\nHave fun!\n\n\n## Setup\n\nGo through the setup instructions for JavaScript to\ninstall the necessary dependencies:\n\nhttp://exercism.io/languages/javascript\n\n## Making the Test Suite Pass\n\nExecute the tests with:\n\n```bash\n$ jasmine-node .\n```\n\nIn many test suites all but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by\nchanging `xit` to `it`.\n\n\n## Source\n\nInspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to Program tutorial. [view source](http://pine.fm/LearnToProgram/?Chapter=06)\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/exercism/javascript/bob/README.md","digestWhenLastPersisted":"af892c2e71e27eb407008a2d6cffb309c16a94c2","preferredLineEnding":null,"nextMarkerId":6,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":12,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/exercism/javascript/bob/bob.js","bufferId":"e6b6161ea4a20e0f25007d3f7dbc378c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":16,"softTabs":true,"firstVisibleScreenRow":19,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":17,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/exercism/javascript/bob/README.md","bufferId":"0f5effca5403810e7927338467dd655c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/benfallon/exercism/javascript/bob/README.md","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-javascript","language-gfm","language-shellscript","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/benfallon/exercism/javascript/bob/bob.spec.js"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-03-30T16:06:16.996Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"12":{"id":12,"path":"/Users/benfallon/exercism/javascript/bob/bob.js","colorMarkers":[]},"16":{"id":16,"path":"/Users/benfallon/exercism/javascript/bob/README.md","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/Users/benfallon/exercism/javascript/bob/bob.js":1459353678640,"/Users/benfallon/exercism/javascript/bob/README.md":1459353890697},"metrics":{"sessionLength":310587},"tree-view":{"directoryExpansionStates":{"/Users/benfallon/exercism/javascript/bob":{"isExpanded":true,"entries":{}}},"selectedPath":"/Users/benfallon/exercism/javascript/bob/README.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}