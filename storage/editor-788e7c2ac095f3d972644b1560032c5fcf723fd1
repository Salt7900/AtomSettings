{"version":1,"windowDimensions":{"x":1930,"y":47,"width":1818,"height":999,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/benfallon/Downloads/Geotify-Starter/Geotify"],"buffers":[{"text":"func loadAllGeotags() {\n  geotags = []\n\n  if let savedItems = NSUserDefaults.standardUserDefaults().arrayForKey(kSavedItemsKey) {\n    for savedItem in savedItems {\n      if let geotag = NSKeyedUnarchiver.unarchiveObjectWithData(savedItem as! NSData) as? Geotification {\n        addGeotification(geotification)\n      }\n    }\n  }\n}\n\nfunc saveAllGeotifications() {\n  let items = NSMutableArray()\n  for geotification in geotifications {\n    let item = NSKeyedArchiver.archivedDataWithRootObject(geotification)\n    items.addObject(item)\n  }\n  NSUserDefaults.standardUserDefaults().setObject(items, forKey: kSavedItemsKey)\n  NSUserDefaults.standardUserDefaults().synchronize()\n}\n\n// MARK: Functions that update the model/associated views with geotification changes\n\nfunc addGeotification(geotification: Geotification) {\n  geotifications.append(geotification)\n  mapView.addAnnotation(geotification)\n  addRadiusOverlayForGeotification(geotification)\n  updateGeotificationsCount()\n}\n\nfunc removeGeotification(geotification: Geotification) {\n  if let indexInArray = geotifications.indexOf(geotification) {\n    geotifications.removeAtIndex(indexInArray)\n  }\n\n  mapView.removeAnnotation(geotification)\n  removeRadiusOverlayForGeotification(geotification)\n  updateGeotificationsCount()\n}\n\nfunc updateGeotificationsCount() {\n  title = \"Geotifications (\\(geotifications.count))\"\n}\n\n// MARK: AddGeotificationViewControllerDelegate\n\nfunc addGeotificationViewController(controller: AddGeotificationViewController, didAddCoordinate coordinate: CLLocationCoordinate2D, radius: Double, identifier: String, note: String, eventType: EventType) {\n  controller.dismissViewControllerAnimated(true, completion: nil)\n  // Add geotification\n  let geotification = Geotification(coordinate: coordinate, radius: radius, identifier: identifier, note: note, eventType: eventType)\n  addGeotification(geotification)\n  saveAllGeotifications()\n}\n\n// MARK: MKMapViewDelegate\n\nfunc mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView! {\n  let identifier = \"myGeotification\"\n  if annotation is Geotification {\n    var annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier) as? MKPinAnnotationView\n    if annotationView == nil {\n      annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n      annotationView?.canShowCallout = true\n      let removeButton = UIButton(type: .Custom)\n      removeButton.frame = CGRect(x: 0, y: 0, width: 23, height: 23)\n      removeButton.setImage(UIImage(named: \"DeleteGeotification\")!, forState: .Normal)\n      annotationView?.leftCalloutAccessoryView = removeButton\n    } else {\n      annotationView?.annotation = annotation\n    }\n    return annotationView\n  }\n  return nil\n}\n\nfunc mapView(mapView: MKMapView, rendererForOverlay overlay: MKOverlay) -> MKOverlayRenderer! {\n  if overlay is MKCircle {\n    let circleRenderer = MKCircleRenderer(overlay: overlay)\n    circleRenderer.lineWidth = 1.0\n    circleRenderer.strokeColor = UIColor.purpleColor()\n    circleRenderer.fillColor = UIColor.purpleColor().colorWithAlphaComponent(0.4)\n    return circleRenderer\n  }\n  return nil\n}\n\nfunc mapView(mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n  // Delete geotification\n  let geotification = view.annotation as! Geotification\n  removeGeotification(geotification)\n  saveAllGeotifications()\n}\n\n// MARK: Map overlay functions\n\nfunc addRadiusOverlayForGeotification(geotification: Geotification) {\n  mapView?.addOverlay(MKCircle(centerCoordinate: geotification.coordinate, radius: geotification.radius))\n}\n\nfunc removeRadiusOverlayForGeotification(geotification: Geotification) {\n  // Find exactly one overlay which has the same coordinates & radius to remove\n  if let overlays = mapView?.overlays {\n    for overlay in overlays {\n      if let circleOverlay = overlay as? MKCircle {\n        let coord = circleOverlay.coordinate\n        if coord.latitude == geotification.coordinate.latitude && coord.longitude == geotification.coordinate.longitude && circleOverlay.radius == geotification.radius {\n          mapView?.removeOverlay(circleOverlay)\n          break\n        }\n      }\n    }\n  }\n}\n","markerStore":{"nextMarkerId":408,"markersById":{"0":{"range":{"start":{"row":22,"column":41},"end":{"row":22,"column":51}},"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"clip":"forward","autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":39,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":36},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[114,0]],"oldText":"","newText":"func loadAllGeotifications() {\n  geotifications = []\n\n  if let savedItems = NSUserDefaults.standardUserDefaults().arrayForKey(kSavedItemsKey) {\n    for savedItem in savedItems {\n      if let geotification = NSKeyedUnarchiver.unarchiveObjectWithData(savedItem as! NSData) as? Geotification {\n        addGeotification(geotification)\n      }\n    }\n  }\n}\n\nfunc saveAllGeotifications() {\n  let items = NSMutableArray()\n  for geotification in geotifications {\n    let item = NSKeyedArchiver.archivedDataWithRootObject(geotification)\n    items.addObject(item)\n  }\n  NSUserDefaults.standardUserDefaults().setObject(items, forKey: kSavedItemsKey)\n  NSUserDefaults.standardUserDefaults().synchronize()\n}\n\n// MARK: Functions that update the model/associated views with geotification changes\n\nfunc addGeotification(geotification: Geotification) {\n  geotifications.append(geotification)\n  mapView.addAnnotation(geotification)\n  addRadiusOverlayForGeotification(geotification)\n  updateGeotificationsCount()\n}\n\nfunc removeGeotification(geotification: Geotification) {\n  if let indexInArray = geotifications.indexOf(geotification) {\n    geotifications.removeAtIndex(indexInArray)\n  }\n\n  mapView.removeAnnotation(geotification)\n  removeRadiusOverlayForGeotification(geotification)\n  updateGeotificationsCount()\n}\n\nfunc updateGeotificationsCount() {\n  title = \"Geotifications (\\(geotifications.count))\"\n}\n\n// MARK: AddGeotificationViewControllerDelegate\n\nfunc addGeotificationViewController(controller: AddGeotificationViewController, didAddCoordinate coordinate: CLLocationCoordinate2D, radius: Double, identifier: String, note: String, eventType: EventType) {\n  controller.dismissViewControllerAnimated(true, completion: nil)\n  // Add geotification\n  let geotification = Geotification(coordinate: coordinate, radius: radius, identifier: identifier, note: note, eventType: eventType)\n  addGeotification(geotification)\n  saveAllGeotifications()\n}\n\n// MARK: MKMapViewDelegate\n\nfunc mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView! {\n  let identifier = \"myGeotification\"\n  if annotation is Geotification {\n    var annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier) as? MKPinAnnotationView\n    if annotationView == nil {\n      annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n      annotationView?.canShowCallout = true\n      let removeButton = UIButton(type: .Custom)\n      removeButton.frame = CGRect(x: 0, y: 0, width: 23, height: 23)\n      removeButton.setImage(UIImage(named: \"DeleteGeotification\")!, forState: .Normal)\n      annotationView?.leftCalloutAccessoryView = removeButton\n    } else {\n      annotationView?.annotation = annotation\n    }\n    return annotationView\n  }\n  return nil\n}\n\nfunc mapView(mapView: MKMapView, rendererForOverlay overlay: MKOverlay) -> MKOverlayRenderer! {\n  if overlay is MKCircle {\n    let circleRenderer = MKCircleRenderer(overlay: overlay)\n    circleRenderer.lineWidth = 1.0\n    circleRenderer.strokeColor = UIColor.purpleColor()\n    circleRenderer.fillColor = UIColor.purpleColor().colorWithAlphaComponent(0.4)\n    return circleRenderer\n  }\n  return nil\n}\n\nfunc mapView(mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n  // Delete geotification\n  let geotification = view.annotation as! Geotification\n  removeGeotification(geotification)\n  saveAllGeotifications()\n}\n\n// MARK: Map overlay functions\n\nfunc addRadiusOverlayForGeotification(geotification: Geotification) {\n  mapView?.addOverlay(MKCircle(centerCoordinate: geotification.coordinate, radius: geotification.radius))\n}\n\nfunc removeRadiusOverlayForGeotification(geotification: Geotification) {\n  // Find exactly one overlay which has the same coordinates & radius to remove\n  if let overlays = mapView?.overlays {\n    for overlay in overlays {\n      if let circleOverlay = overlay as? MKCircle {\n        let coord = circleOverlay.coordinate\n        if coord.latitude == geotification.coordinate.latitude && coord.longitude == geotification.coordinate.longitude && circleOverlay.radius == geotification.radius {\n          mapView?.removeOverlay(circleOverlay)\n          break\n        }\n      }\n    }\n  }\n}\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[114,0],[114,0]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[0,16],[0,26]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,16],[0,26]],"newRange":[[0,16],[0,16]],"oldText":"ifications","newText":""}},{"type":"change","content":{"oldRange":[[0,16],[0,16]],"newRange":[[0,16],[0,17]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[0,17],[0,17]],"newRange":[[0,17],[0,18]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[0,18],[0,18]],"newRange":[[0,18],[0,19]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[0,19],[0,19]],"newRange":[[0,19],[0,20]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[0,19],[0,20]],"newRange":[[0,19],[0,19]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[0,19],[0,19]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[1,2],[1,16]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[1,2],[1,16]],"newRange":[[1,2],[1,3]],"oldText":"geotifications","newText":"g"}},{"type":"group-end","snapshot":{"0":{"range":[[1,3],[1,3]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"clip":"forward"},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[1,3],[1,3]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"clip":"forward"},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[1,3],[1,3]],"newRange":[[1,3],[1,4]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[1,4],[1,4]],"newRange":[[1,4],[1,5]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[1,5],[1,5]],"newRange":[[1,5],[1,6]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[1,6],[1,6]],"newRange":[[1,6],[1,7]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[1,7],[1,7]],"newRange":[[1,7],[1,8]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[1,8],[1,8]],"newRange":[[1,8],[1,9]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[1,9],[1,9]],"newRange":[[1,9],[1,10]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[1,9],[1,10]],"newRange":[[1,9],[1,9]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[1,9],[1,9]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"clip":"forward"},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[5,13],[5,26]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"clip":"forward"},"reversed":true,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[5,13],[5,26]],"newRange":[[5,13],[5,14]],"oldText":"geotification","newText":"g"}},{"type":"change","content":{"oldRange":[[5,14],[5,14]],"newRange":[[5,14],[5,15]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[5,15],[5,15]],"newRange":[[5,15],[5,16]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[5,16],[5,16]],"newRange":[[5,16],[5,17]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[5,17],[5,17]],"newRange":[[5,17],[5,18]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[5,18],[5,18]],"newRange":[[5,18],[5,19]],"oldText":"","newText":"g"}},{"type":"group-end","snapshot":{"0":{"range":[[5,19],[5,19]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"clip":"forward"},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/Untitled","digestWhenLastPersisted":"d11ef346004275abef4a15cd054c25536a348edb","preferredLineEnding":"\n","deserializer":"TextBuffer","version":2},{"text":"//\n//  AddGeotificationViewController.swift\n//  Geotify\n//\n//  Created by Ken Toh on 24/1/15.\n//  Copyright (c) 2015 Ken Toh. All rights reserved.\n//\n\nimport UIKit\nimport MapKit\n\nprotocol AddGeotificationsViewControllerDelegate {\n  func addGeotificationViewController(controller: AddGeotificationViewController, didAddCoordinate coordinate: CLLocationCoordinate2D,\n    radius: Double, identifier: String, note: String, eventType: EventType)\n}\n\nclass AddGeotificationViewController: UITableViewController {\n\n  @IBOutlet var addButton: UIBarButtonItem!\n  @IBOutlet var zoomButton: UIBarButtonItem!\n\n  @IBOutlet weak var eventTypeSegmentedControl: UISegmentedControl!\n  @IBOutlet weak var radiusTextField: UITextField!\n  @IBOutlet weak var noteTextField: UITextField!\n  @IBOutlet weak var mapView: MKMapView!\n\n  var delegate: AddGeotificationsViewControllerDelegate!\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    navigationItem.rightBarButtonItems = [addButton, zoomButton]\n    addButton.enabled = false\n\n    tableView.tableFooterView = UIView()\n  }\n\n  @IBAction func textFieldEditingChanged(sender: UITextField) {\n    addButton.enabled = !radiusTextField.text!.isEmpty && !noteTextField.text!.isEmpty\n  }\n\n  @IBAction func onCancel(sender: AnyObject) {\n    dismissViewControllerAnimated(true, completion: nil)\n  }\n\n  @IBAction private func onAdd(sender: AnyObject) {\n    var coordinate = mapView.centerCoordinate\n    var radius = (radiusTextField.text! as NSString).doubleValue\n    var identifier = NSUUID().UUIDString\n    var note = noteTextField.text\n    var eventType = (eventTypeSegmentedControl.selectedSegmentIndex == 0) ? EventType.OnEntry : EventType.OnExit\n    delegate!.addGeotificationViewController(self, didAddCoordinate: coordinate, radius: radius, identifier: identifier, note: note!, eventType: eventType)\n  }\n\n  @IBAction private func onZoomToCurrentLocation(sender: AnyObject) {\n    zoomToUserLocationInMapView(mapView)\n  }\n}\n","markerStore":{"nextMarkerId":3,"markersById":{"0":{"range":{"start":{"row":40,"column":0},"end":{"row":40,"column":0}},"properties":{"type":"selection","editorId":50,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/AddGeotificationViewController.swift","digestWhenLastPersisted":"c1917944024e2e81bd55e86d6e1d6762ac43be1e","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"//\n//  GeotificationsViewController.swift\n//  Geotify\n//\n//  Created by Ken Toh on 24/1/15.\n//  Copyright (c) 2015 Ken Toh. All rights reserved.\n//\n\nimport UIKit\nimport MapKit\n\nlet kSavedItemsKey = \"savedItems\"\n\nclass GeotificationsViewController: UIViewController, AddGeotificationsViewControllerDelegate, MKMapViewDelegate {\n\n  @IBOutlet weak var mapView: MKMapView!\n\n  var geotifications = [Geotification]()\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    loadAllGeotifications()\n  }\n\n  override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n    if segue.identifier == \"addGeotification\" {\n      let navigationController = segue.destinationViewController as! UINavigationController\n      let vc = navigationController.viewControllers.first as! AddGeotificationViewController\n      vc.delegate = self\n    }\n  }\n\n  // MARK: Loading and saving functions\n\n  func loadAllGeotifications() {\n    geotifications = []\n\n    if let savedItems = NSUserDefaults.standardUserDefaults().arrayForKey(kSavedItemsKey) {\n      for savedItem in savedItems {\n        if let geotification = NSKeyedUnarchiver.unarchiveObjectWithData(savedItem as! NSData) as? Geotification {\n          addGeotification(geotification)\n        }\n      }\n    }\n  }\n\n  func saveAllGeotifications() {\n    let items = NSMutableArray()\n    for geotification in geotifications {\n      let item = NSKeyedArchiver.archivedDataWithRootObject(geotification)\n      items.addObject(item)\n    }\n    NSUserDefaults.standardUserDefaults().setObject(items, forKey: kSavedItemsKey)\n    NSUserDefaults.standardUserDefaults().synchronize()\n  }\n\n  // MARK: Functions that update the model/associated views with geotification changes\n\n  func addGeotification(geotification: Geotification) {\n    geotifications.append(geotification)\n    mapView.addAnnotation(geotification)\n    addRadiusOverlayForGeotification(geotification)\n    updateGeotificationsCount()\n  }\n\n  func removeGeotification(geotification: Geotification) {\n    if let indexInArray = geotifications.indexOf(geotification) {\n      geotifications.removeAtIndex(indexInArray)\n    }\n\n    mapView.removeAnnotation(geotification)\n    removeRadiusOverlayForGeotification(geotification)\n    updateGeotificationsCount()\n  }\n\n  func updateGeotificationsCount() {\n    title = \"Geotifications (\\(geotifications.count))\"\n  }\n\n  // MARK: AddGeotificationViewControllerDelegate\n\n  func addGeotificationViewController(controller: AddGeotificationViewController, didAddCoordinate coordinate: CLLocationCoordinate2D, radius: Double, identifier: String, note: String, eventType: EventType) {\n    controller.dismissViewControllerAnimated(true, completion: nil)\n    // Add geotification\n    let geotification = Geotification(coordinate: coordinate, radius: radius, identifier: identifier, note: note, eventType: eventType)\n    addGeotification(geotification)\n    saveAllGeotifications()\n  }\n\n  // MARK: MKMapViewDelegate\n\n  func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView! {\n    let identifier = \"myGeotification\"\n    if annotation is Geotification {\n      var annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier) as? MKPinAnnotationView\n      if annotationView == nil {\n        annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n        annotationView?.canShowCallout = true\n        let removeButton = UIButton(type: .Custom)\n        removeButton.frame = CGRect(x: 0, y: 0, width: 23, height: 23)\n        removeButton.setImage(UIImage(named: \"DeleteGeotification\")!, forState: .Normal)\n        annotationView?.leftCalloutAccessoryView = removeButton\n      } else {\n        annotationView?.annotation = annotation\n      }\n      return annotationView\n    }\n    return nil\n  }\n\n  func mapView(mapView: MKMapView, rendererForOverlay overlay: MKOverlay) -> MKOverlayRenderer! {\n    if overlay is MKCircle {\n      let circleRenderer = MKCircleRenderer(overlay: overlay)\n      circleRenderer.lineWidth = 1.0\n      circleRenderer.strokeColor = UIColor.purpleColor()\n      circleRenderer.fillColor = UIColor.purpleColor().colorWithAlphaComponent(0.4)\n      return circleRenderer\n    }\n    return nil\n  }\n\n  func mapView(mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n    // Delete geotification\n    let geotification = view.annotation as! Geotification\n    removeGeotification(geotification)\n    saveAllGeotifications()\n  }\n\n  // MARK: Map overlay functions\n\n  func addRadiusOverlayForGeotification(geotification: Geotification) {\n    mapView?.addOverlay(MKCircle(centerCoordinate: geotification.coordinate, radius: geotification.radius))\n  }\n\n  func removeRadiusOverlayForGeotification(geotification: Geotification) {\n    // Find exactly one overlay which has the same coordinates & radius to remove\n    if let overlays = mapView?.overlays {\n      for overlay in overlays {\n        if let circleOverlay = overlay as? MKCircle {\n          let coord = circleOverlay.coordinate\n          if coord.latitude == geotification.coordinate.latitude && coord.longitude == geotification.coordinate.longitude && circleOverlay.radius == geotification.radius {\n            mapView?.removeOverlay(circleOverlay)\n            break\n          }\n        }\n      }\n    }\n  }\n\n  // MARK: Other mapview functions\n\n  @IBAction func zoomToCurrentLocation(sender: AnyObject) {\n    zoomToUserLocationInMapView(mapView)\n  }\n}\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":54},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift","digestWhenLastPersisted":"4329eff5af96bc14670f95b257cf2222e4148897","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":36,"softTabs":true,"scrollRow":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":37,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/Untitled","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":50,"softTabs":true,"scrollRow":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":51,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/AddGeotificationViewController.swift","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":54,"softTabs":true,"displayBuffer":{"deserializer":"DisplayBuffer","id":55,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-swift","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/benfallon/Downloads/Geotify-Starter/Geotify/AppDelegate.swift","/Users/benfallon/Downloads/Geotify-Starter/Geotify/Geotification.swift"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-11-18T21:26:59.707Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"36":{"id":36,"path":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/Untitled","colorMarkers":[]},"50":{"id":50,"path":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/AddGeotificationViewController.swift","colorMarkers":[]},"54":{"id":54,"path":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/Users/benfallon/Downloads/Geotify-Starter/Geotify/Untitled":1447879495214,"/Users/benfallon/Downloads/Geotify-Starter/Geotify/AddGeotificationViewController.swift":1447879784073,"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift":1447880523222},"metrics":{"sessionLength":2582137},"tabs":[{"previewTabURI":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift"}],"tree-view":{"directoryExpansionStates":{"/Users/benfallon/Downloads/Geotify-Starter/Geotify":{"isExpanded":true,"entries":{"Base.lproj":{"isExpanded":false,"entries":{}},"Images.xcassets":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/benfallon/Downloads/Geotify-Starter/Geotify/GeotificationsViewController.swift","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":278},"find-and-replace":{"findOptions":{"findPattern":"","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]}},"fullScreen":false}