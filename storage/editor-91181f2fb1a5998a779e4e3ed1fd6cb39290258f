{"version":1,"windowDimensions":{"x":33,"y":23,"width":1698,"height":1049,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/benfallon/Desktop/DBC/Geotify-Starter"],"buffers":[{"text":"","markerStore":{"nextMarkerId":33,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null,"autoscroll":false,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"26":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"28":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"30":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"32":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":70,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/Geotify/Geotification.swift","digestWhenLastPersisted":"da39a3ee5e6b4b0d3255bfef95601890afd80709","preferredLineEnding":"\n","deserializer":"TextBuffer","version":2},{"text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>NSLocationAlwaysUsageDescription</key>\n\t<string>Geoitfy requires access to your phone&apos;s location to notify you when you enter or leave a geofence</string>\n\t<key>CFBundleDevelopmentRegion</key>\n\t<string>en</string>\n\t<key>CFBundleExecutable</key>\n\t<string>$(EXECUTABLE_NAME)</string>\n\t<key>CFBundleIdentifier</key>\n\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n\t<key>CFBundleInfoDictionaryVersion</key>\n\t<string>6.0</string>\n\t<key>CFBundleName</key>\n\t<string>$(PRODUCT_NAME)</string>\n\t<key>CFBundlePackageType</key>\n\t<string>APPL</string>\n\t<key>CFBundleShortVersionString</key>\n\t<string>1.0</string>\n\t<key>CFBundleSignature</key>\n\t<string>????</string>\n\t<key>CFBundleVersion</key>\n\t<string>1</string>\n\t<key>LSRequiresIPhoneOS</key>\n\t<true/>\n\t<key>UILaunchStoryboardName</key>\n\t<string>LaunchScreen</string>\n\t<key>UIMainStoryboardFile</key>\n\t<string>Main</string>\n\t<key>UIRequiredDeviceCapabilities</key>\n\t<array>\n\t\t<string>armv7</string>\n\t</array>\n\t<key>UISupportedInterfaceOrientations</key>\n\t<array>\n\t\t<string>UIInterfaceOrientationPortrait</string>\n\t\t<string>UIInterfaceOrientationLandscapeLeft</string>\n\t\t<string>UIInterfaceOrientationLandscapeRight</string>\n\t</array>\n</dict>\n</plist>\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":66,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Info.plist","digestWhenLastPersisted":"641273ba3233f9e1fd3704d7fcfee7d75a1333fe","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"//\n//  GeotificationsViewController.swift\n//  Geotify\n//\n//  Created by Ken Toh on 24/1/15.\n//  Copyright (c) 2015 Ken Toh. All rights reserved.\n//\n\nimport UIKit\nimport MapKit\nimport CoreLocation\n\nlet kSavedItemsKey = \"savedItems\"\n\nclass GeotificationsViewController: UIViewController, AddGeotificationsViewControllerDelegate, MKMapViewDelegate, CLLocationManagerDelegate {\n\n  @IBOutlet weak var mapView: MKMapView!\n\n  var geotifications = [Geotification]()\n  let locationManager = CLLocationManager()\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    locationManager.delegate = self\n    locationManager.requestAlwaysAuthorization()\n    loadAllGeotifications()\n  }\n\n  override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n    if segue.identifier == \"addGeotification\" {\n      let navigationController = segue.destinationViewController as! UINavigationController\n      let vc = navigationController.viewControllers.first as! AddGeotificationViewController\n      vc.delegate = self\n    }\n  }\n\n  // MARK: Loading and saving functions\n\n  func loadAllGeotifications() {\n    geotifications = []\n\n    if let savedItems = NSUserDefaults.standardUserDefaults().arrayForKey(kSavedItemsKey) {\n      for savedItem in savedItems {\n        if let geotification = NSKeyedUnarchiver.unarchiveObjectWithData(savedItem as! NSData) as? Geotification {\n          addGeotification(geotification)\n        }\n      }\n    }\n  }\n\n  func saveAllGeotifications() {\n    let items = NSMutableArray()\n    for geotification in geotifications {\n      let item = NSKeyedArchiver.archivedDataWithRootObject(geotification)\n      items.addObject(item)\n    }\n    NSUserDefaults.standardUserDefaults().setObject(items, forKey: kSavedItemsKey)\n    NSUserDefaults.standardUserDefaults().synchronize()\n  }\n\n  // MARK: Functions that update the model/associated views with geotification changes\n\n  func addGeotification(geotification: Geotification) {\n    geotifications.append(geotification)\n    mapView.addAnnotation(geotification)\n    addRadiusOverlayForGeotification(geotification)\n    updateGeotificationsCount()\n  }\n\n  func removeGeotification(geotification: Geotification) {\n    if let indexInArray = geotifications.indexOf(geotification) {\n      geotifications.removeAtIndex(indexInArray)\n    }\n\n    mapView.removeAnnotation(geotification)\n    removeRadiusOverlayForGeotification(geotification)\n    updateGeotificationsCount()\n  }\n\n  func updateGeotificationsCount() {\n    title = \"Geotifications (\\(geotifications.count))\"\n    navigationItem.rightBarButtonItem?.enabled = (geotifications.count < 20)\n  }\n\n  // MARK: AddGeotificationViewControllerDelegate\n\n  func addGeotificationViewController(controller: AddGeotificationViewController, didAddCoordinate coordinate: CLLocationCoordinate2D, radius: Double, identifier: String, note: String, eventType: EventType) {\n    controller.dismissViewControllerAnimated(true, completion: nil)\n    // Add geotification\n    \n    let clampedRadius = (radius > locationManager.maximumRegionMonitoringDistance) ? locationManager.maximumRegionMonitoringDistance : radius\n    \n    let geotification = Geotification(coordinate: coordinate, radius: radius, identifier: identifier, note: note, eventType: eventType)\n    addGeotification(geotification)\n    \n    startMonitoringGeotification(geotification)\n    \n    saveAllGeotifications()\n  }\n\n  // MARK: MKMapViewDelegate\n\n  func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView! {\n    let identifier = \"myGeotification\"\n    if annotation is Geotification {\n      var annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier) as? MKPinAnnotationView\n      if annotationView == nil {\n        annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n        annotationView?.canShowCallout = true\n        let removeButton = UIButton(type: .Custom)\n        removeButton.frame = CGRect(x: 0, y: 0, width: 23, height: 23)\n        removeButton.setImage(UIImage(named: \"DeleteGeotification\")!, forState: .Normal)\n        annotationView?.leftCalloutAccessoryView = removeButton\n      } else {\n        annotationView?.annotation = annotation\n      }\n      return annotationView\n    }\n    return nil\n  }\n\n  func mapView(mapView: MKMapView, rendererForOverlay overlay: MKOverlay) -> MKOverlayRenderer! {\n    if overlay is MKCircle {\n      let circleRenderer = MKCircleRenderer(overlay: overlay)\n      circleRenderer.lineWidth = 1.0\n      circleRenderer.strokeColor = UIColor.purpleColor()\n      circleRenderer.fillColor = UIColor.purpleColor().colorWithAlphaComponent(0.4)\n      return circleRenderer\n    }\n    return nil\n  }\n\n  func mapView(mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n    // Delete geotification\n    let geotification = view.annotation as! Geotification\n    stopMonitoringGeotification(geotification)\n    removeGeotification(geotification)\n    saveAllGeotifications()\n  }\n\n  // MARK: Map overlay functions\n\n  func addRadiusOverlayForGeotification(geotification: Geotification) {\n    mapView?.addOverlay(MKCircle(centerCoordinate: geotification.coordinate, radius: geotification.radius))\n  }\n\n  func removeRadiusOverlayForGeotification(geotification: Geotification) {\n    // Find exactly one overlay which has the same coordinates & radius to remove\n    if let overlays = mapView?.overlays {\n      for overlay in overlays {\n        if let circleOverlay = overlay as? MKCircle {\n          let coord = circleOverlay.coordinate\n          if coord.latitude == geotification.coordinate.latitude && coord.longitude == geotification.coordinate.longitude && circleOverlay.radius == geotification.radius {\n            mapView?.removeOverlay(circleOverlay)\n            break\n          }\n        }\n      }\n    }\n  }\n\n  // MARK: Other mapview functions\n\n  @IBAction func zoomToCurrentLocation(sender: AnyObject) {\n    zoomToUserLocationInMapView(mapView)\n  }\n  \n  func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    mapView.showsUserLocation = (status == .AuthorizedAlways)\n  }\n  \n  func regionWithGeotification(geotification: Geotification) -> CLCircularRegion {\n    // 1\n    let region = CLCircularRegion(center: geotification.coordinate, radius: geotification.radius, identifier: geotification.identifier)\n    // 2\n    region.notifyOnEntry = (geotification.eventType == .OnEntry)\n    region.notifyOnExit = !region.notifyOnEntry\n    return region\n  }\n  \n  func startMonitoringGeotification(geotification: Geotification) {\n    // 1\n    if !CLLocationManager.isMonitoringAvailableForClass(CLCircularRegion) {\n      showSimpleAlertWithTitle(\"Error\", message: \"Geofencing is not supported on this device!\", viewController: self)\n      return\n    }\n    // 2\n    if CLLocationManager.authorizationStatus() != .AuthorizedAlways {\n      showSimpleAlertWithTitle(\"Warning\", message: \"Your geotification is saved but will only be activated once you grant Geotify permission to access the device location.\", viewController: self)\n    }\n    // 3\n    let region = regionWithGeotification(geotification)\n    // 4\n    locationManager.startMonitoringForRegion(region)\n  }\n  \n  func stopMonitoringGeotification(geotification: Geotification){\n    for region in locationManager.monitoredRegions{\n      if let circularRegion = region as? CLCircularRegion{\n        if circularRegion.identifier == geotification.identifier{\n          locationManager.stopMonitoringForRegion(circularRegion)\n        }\n      }\n    }\n  }\n  \n  func locationManager(manager: CLLocationManager!, monitoringDidFailForRegion region: CLRegion!, withError error: NSError!) {\n    print(\"Monitoring fails for the region with identifier: \\(region.identifier)\")\n  }\n  \n  func locationManager(manager: CLLocationManager!, didFailWithError error: NSError!){\n    print(\"Location Manager failed with the folloing error: \\(error)\")\n  }\n\n}\n","markerStore":{"nextMarkerId":101,"markersById":{"0":{"range":{"start":{"row":67,"column":3},"end":{"row":67,"column":3}},"properties":{"type":"selection","editorId":94,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"99":{"range":{"start":{"row":67,"column":2},"end":{"row":67,"column":3}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"100":{"range":{"start":{"row":62,"column":54},"end":{"row":62,"column":55}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/GeotificationsViewController.swift","digestWhenLastPersisted":"5aa639071bdcc9068cebef00d4ba8b133529ba99","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"//\n//  Geotification.swift\n//  Geotify\n//\n//  Created by Ken Toh on 24/1/15.\n//  Copyright (c) 2015 Ken Toh. All rights reserved.\n//\n\nimport UIKit\nimport MapKit\n\n\nimport CoreLocation\n\nlet kGeotificationLatitudeKey = \"latitude\"\nlet kGeotificationLongitudeKey = \"longitude\"\nlet kGeotificationRadiusKey = \"radius\"\nlet kGeotificationIdentifierKey = \"identifier\"\nlet kGeotificationNoteKey = \"note\"\nlet kGeotificationEventTypeKey = \"eventType\"\n\nlet kGeotagLatitudeKey = \"latitude\"\nlet kGeotagLongitudeKey = \"longitude\"\nlet kGeotagRadiusKey = \"radius\"\nlet kGeotagIdentifierKey = \"identifier\"\nlet kGeotagNoteKey = \"note\"\nlet kGeotagEventTypeKey = \"eventType\"\n\nenum EventType: Int {\n  case OnEntry = 0\n  case OnExit\n}\n\nclass Geotification: NSObject, NSCoding, MKAnnotation {\n  var coordinate: CLLocationCoordinate2D\n  var radius: CLLocationDistance\n  var identifier: String\n  var note: String\n  var eventType: EventType\n\n  var title: String? {\n    if note.isEmpty {\n      return \"No Note\"\n    }\n    return note\n  }\n\n  var subtitle: String? {\n    let eventTypeString = eventType == .OnEntry ? \"On Entry\" : \"On Exit\"\n    return \"Radius: \\(radius)m - \\(eventTypeString)\"\n  }\n\n  init(coordinate: CLLocationCoordinate2D, radius: CLLocationDistance, identifier: String, note: String, eventType: EventType) {\n    self.coordinate = coordinate\n    self.radius = radius\n    self.identifier = identifier\n    self.note = note\n    self.eventType = eventType\n  }\n\n  // MARK: NSCoding\n\n  required init?(coder decoder: NSCoder) {\n    let latitude = decoder.decodeDoubleForKey(kGeotificationLatitudeKey)\n    let longitude = decoder.decodeDoubleForKey(kGeotificationLongitudeKey)\n    coordinate = CLLocationCoordinate2D(latitude: latitude, longitude: longitude)\n    radius = decoder.decodeDoubleForKey(kGeotificationRadiusKey)\n    identifier = decoder.decodeObjectForKey(kGeotificationIdentifierKey) as! String\n    note = decoder.decodeObjectForKey(kGeotificationNoteKey) as! String\n    eventType = EventType(rawValue: decoder.decodeIntegerForKey(kGeotificationEventTypeKey))!\n  }\n\n  func encodeWithCoder(coder: NSCoder) {\n    coder.encodeDouble(coordinate.latitude, forKey: kGeotificationLatitudeKey)\n    coder.encodeDouble(coordinate.longitude, forKey: kGeotificationLongitudeKey)\n    coder.encodeDouble(radius, forKey: kGeotificationRadiusKey)\n    coder.encodeObject(identifier, forKey: kGeotificationIdentifierKey)\n    coder.encodeObject(note, forKey: kGeotificationNoteKey)\n    coder.encodeInt(Int32(eventType.rawValue), forKey: kGeotificationEventTypeKey)\n  }\n}\n","markerStore":{"nextMarkerId":23,"markersById":{"0":{"range":{"start":{"row":67,"column":13},"end":{"row":67,"column":13}},"properties":{"type":"selection","editorId":98,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":5,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Geotification.swift","digestWhenLastPersisted":"e21631be480168e721f3e4697b99bc1bd419a76b","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"//\n//  AddGeotificationViewController.swift\n//  Geotify\n//\n//  Created by Ken Toh on 24/1/15.\n//  Copyright (c) 2015 Ken Toh. All rights reserved.\n//\n\n//This is a comment that I am adding from Jen's computer.\n//And Now this is one from ben\n\nimport UIKit\nimport MapKit\n\nprotocol AddGeotificationsViewControllerDelegate {\n  func addGeotificationViewController(controller: AddGeotificationViewController, didAddCoordinate coordinate: CLLocationCoordinate2D,\n    radius: Double, identifier: String, note: String, eventType: EventType)\n}\n\nclass AddGeotificationViewController: UITableViewController {\n\n  @IBOutlet var addButton: UIBarButtonItem!\n  @IBOutlet var zoomButton: UIBarButtonItem!\n\n  @IBOutlet weak var eventTypeSegmentedControl: UISegmentedControl!\n  @IBOutlet weak var radiusTextField: UITextField!\n  @IBOutlet weak var noteTextField: UITextField!\n  @IBOutlet weak var mapView: MKMapView!\n\n  var delegate: AddGeotificationsViewControllerDelegate!\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    navigationItem.rightBarButtonItems = [addButton, zoomButton]\n    addButton.enabled = false\n\n    tableView.tableFooterView = UIView()\n  }\n\n  @IBAction func textFieldEditingChanged(sender: UITextField) {\n    addButton.enabled = !radiusTextField.text!.isEmpty && !noteTextField.text!.isEmpty\n  }\n\n  @IBAction func onCancel(sender: AnyObject) {\n    dismissViewControllerAnimated(true, completion: nil)\n  }\n\n  @IBAction private func onAdd(sender: AnyObject) {\n    var coordinate = mapView.centerCoordinate\n    var radius = (radiusTextField.text! as NSString).doubleValue\n    var identifier = NSUUID().UUIDString\n    var note = noteTextField.text\n    var eventType = (eventTypeSegmentedControl.selectedSegmentIndex == 0) ? EventType.OnEntry : EventType.OnExit\n    delegate!.addGeotificationViewController(self, didAddCoordinate: coordinate, radius: radius, identifier: identifier, note: note!, eventType: eventType)\n  }\n\n  @IBAction private func onZoomToCurrentLocation(sender: AnyObject) {\n    zoomToUserLocationInMapView(mapView)\n  }\n}\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":122},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/AddGeotificationViewController.swift","digestWhenLastPersisted":"2f55ac4813cda11474363f2f9d3bc5ecdc4f1863","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":8,"softTabs":true,"scrollRow":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/Geotify/Geotification.swift","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":94,"softTabs":true,"scrollRow":49,"displayBuffer":{"deserializer":"DisplayBuffer","id":95,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/GeotificationsViewController.swift","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":122,"softTabs":true,"scrollRow":26,"displayBuffer":{"deserializer":"DisplayBuffer","id":123,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/AddGeotificationViewController.swift","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":66,"softTabs":false,"scrollRow":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":67,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Info.plist","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":98,"softTabs":true,"scrollRow":44,"displayBuffer":{"deserializer":"DisplayBuffer","id":99,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Geotification.swift","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/GeotificationsViewController.swift","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-swift","language-property-list","language-xml","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/benfallon/Desktop/DBC/Geotify-Starter/Geotify/AddGeotificationViewController.swift","/Users/benfallon/Desktop/DBC/breadCrumbs/breadCrumbs/crumb.swift","/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/AppDelegate.swift","/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Utilities.swift","/Users/benfallon/Desktop/DBC/Geotify-Starter/GeotifyTests/Info.plist","/Users/benfallon/Desktop/DBC/Geotify-Starter/GeotifyTests/GeotifyTests.swift","/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/TestLocations.gpx"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-11-20T01:02:28.142Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"8":{"id":8,"path":"/Users/benfallon/Desktop/DBC/Geotify-Starter/Geotify/Geotification.swift","colorMarkers":[]},"66":{"id":66,"path":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Info.plist","colorMarkers":[]},"94":{"id":94,"path":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/GeotificationsViewController.swift","colorMarkers":[]},"98":{"id":98,"path":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Geotification.swift","colorMarkers":[]},"122":{"id":122,"path":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/AddGeotificationViewController.swift","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"find-and-replace":{"findOptions":{"findPattern":"","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/benfallon/Desktop/DBC/Geotify-Starter/Geotify/Geotification.swift":1447968841740,"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/GeotificationsViewController.swift":1447980588291,"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/AddGeotificationViewController.swift":1447980585693,"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Info.plist":1447968843217,"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/Geotification.swift":1447970337616},"metrics":{"sessionLength":15491967},"tabs":[{"previewTabURI":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/AddGeotificationViewController.swift"}],"tree-view":{"directoryExpansionStates":{"/Users/benfallon/Desktop/DBC/Geotify-Starter":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"breadCrumbs":{"isExpanded":true,"entries":{"Base.lproj":{"isExpanded":false,"entries":{}},"Images.xcassets":{"isExpanded":false,"entries":{}}}},"breadCrumbs.xcodeproj":{"isExpanded":false,"entries":{}},"GeotifyTests":{"isExpanded":true,"entries":{}}}}},"selectedPath":"/Users/benfallon/Desktop/DBC/Geotify-Starter/breadCrumbs/GeotificationsViewController.swift","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":287}},"fullScreen":false}